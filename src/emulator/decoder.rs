use crate::emulator::instruction::BitOps::*;
use crate::emulator::instruction::ControlOps::*;
use crate::emulator::instruction::Instruction::*;
use crate::emulator::instruction::Ld16::*;
use crate::emulator::instruction::*;

pub fn decode(byte: u8) -> Result<Instruction, String> {
    let high_nibble = byte & 0xF0;
    let low_nibble = byte & 0x0F;

    match high_nibble {
        0x0 => match low_nibble {
            0x0 => Ok(Control(NOP)),
            0x1 => Ok(Load16(BCU16)),
            0x2 => Ok(Load8(Ld8::BC, Ld8::A)),
            0x3 => Ok(Arithmetic16(A16Ops::Inc(A16Args::BC))),
            0x4 => Ok(Arithmetic8(A8Ops::Inc(A8Args::B))),
            0x5 => Ok(Arithmetic8(A8Ops::Dec(A8Args::B))),
            0x6 => Ok(Load8(Ld8::B, Ld8::U8)),
            0x7 => Ok(BitOp(RLCA)),
            0x8 => Ok(Load16(U16SP)),
            0x9 => Ok(Arithmetic16(A16Ops::Add(A16Args::BC))),
            0xA => Ok(Load8(Ld8::A, Ld8::BC)),
            0xB => Ok(Arithmetic16(A16Ops::Dec(A16Args::BC))),
            0xC => Ok(Arithmetic8(A8Ops::Inc(A8Args::C))),
            0xD => Ok(Arithmetic8(A8Ops::Dec(A8Args::C))),
            0xE => Ok(Load8(Ld8::C, Ld8::U8)),
            0xF => Ok(BitOp(RRCA)),
            _ => Err(log_error(byte)),
        },
        0x1 => match low_nibble {
            0x0 => Ok(Control(STOP)),
            0x1 => Ok(Load16(DEU16)),
            0x2 => Ok(Load8(Ld8::DE, Ld8::A)),
            0x3 => Ok(Arithmetic16(A16Ops::Inc(A16Args::DE))),
            0x4 => Ok(Arithmetic8(A8Ops::Inc(A8Args::D))),
            0x5 => Ok(Arithmetic8(A8Ops::Dec(A8Args::D))),
            0x6 => Ok(Load8(Ld8::D, Ld8::U8)),
            0x7 => Ok(BitOp(RLA)),
            0x8 => Ok(JumpRelative(JR::I8)),
            0x9 => Ok(Arithmetic16(A16Ops::Add(A16Args::DE))),
            0xA => Ok(Load8(Ld8::A, Ld8::DE)),
            0xB => Ok(Arithmetic16(A16Ops::Dec(A16Args::DE))),
            0xC => Ok(Arithmetic8(A8Ops::Inc(A8Args::E))),
            0xD => Ok(Arithmetic8(A8Ops::Dec(A8Args::E))),
            0xE => Ok(Load8(Ld8::E, Ld8::U8)),
            0xF => Ok(BitOp(RRA)),
            _ => Err(log_error(byte)),
        },
        0x2 => match low_nibble {
            0x0 => Ok(JumpRelative(JR::NZ)),
            0x1 => Ok(Load16(HLU16)),
            0x2 => Ok(Load8(Ld8::HLPlus, Ld8::A)),
            0x3 => Ok(Arithmetic16(A16Ops::Inc(A16Args::HL))),
            0x4 => Ok(Arithmetic8(A8Ops::Inc(A8Args::H))),
            0x5 => Ok(Arithmetic8(A8Ops::Dec(A8Args::H))),
            0x6 => Ok(Load8(Ld8::H, Ld8::U8)),
            0x7 => Ok(Control(DAA)),
            0x8 => Ok(JumpRelative(JR::Z)),
            0x9 => Ok(Arithmetic16(A16Ops::Add(A16Args::HL))),
            0xA => Ok(Load8(Ld8::A, Ld8::HLPlus)),
            0xB => Ok(Arithmetic16(A16Ops::Dec(A16Args::HL))),
            0xC => Ok(Arithmetic8(A8Ops::Inc(A8Args::L))),
            0xD => Ok(Arithmetic8(A8Ops::Dec(A8Args::L))),
            0xE => Ok(Load8(Ld8::A, Ld8::U8)),
            0xF => Ok(Control(CPL)),
            _ => Err(log_error(byte)),
        },
        0x3 => match low_nibble {
            0x0 => Ok(JumpRelative(JR::NC)),
            0x1 => Ok(Load16(Ld16::SPU16)),
            0x2 => Ok(Load8(Ld8::HLMinus, Ld8::A)),
            0x3 => Ok(Arithmetic16(A16Ops::Inc(A16Args::SP))),
            0x4 => Ok(Arithmetic8(A8Ops::Inc(A8Args::HL))),
            0x5 => Ok(Arithmetic8(A8Ops::Dec(A8Args::HL))),
            0x6 => Ok(Load8(Ld8::HL, Ld8::U8)),
            0x7 => Ok(Control(SCF)),
            0x8 => Ok(JumpRelative(JR::C)),
            0x9 => Ok(Arithmetic16(A16Ops::Add(A16Args::SP))),
            0xA => Ok(Load8(Ld8::A, Ld8::HLMinus)),
            0xB => Ok(Arithmetic16(A16Ops::Dec(A16Args::SP))),
            0xC => Ok(Arithmetic8(A8Ops::Inc(A8Args::A))),
            0xD => Ok(Arithmetic8(A8Ops::Dec(A8Args::A))),
            0xE => Ok(Load8(Ld8::A, Ld8::U8)),
            0xF => Ok(Control(CCF)),
            _ => Err(log_error(byte)),
        },
        0x4 => match low_nibble {
            0x0 => Ok(Load8(Ld8::B, Ld8::B)),
            0x1 => Ok(Load8(Ld8::B, Ld8::C)),
            0x2 => Ok(Load8(Ld8::B, Ld8::D)),
            0x3 => Ok(Load8(Ld8::B, Ld8::E)),
            0x4 => Ok(Load8(Ld8::B, Ld8::H)),
            0x5 => Ok(Load8(Ld8::B, Ld8::L)),
            0x6 => Ok(Load8(Ld8::B, Ld8::HL)),
            0x7 => Ok(Load8(Ld8::B, Ld8::A)),
            0x8 => Ok(Load8(Ld8::C, Ld8::B)),
            0x9 => Ok(Load8(Ld8::C, Ld8::C)),
            0xA => Ok(Load8(Ld8::C, Ld8::D)),
            0xB => Ok(Load8(Ld8::C, Ld8::E)),
            0xC => Ok(Load8(Ld8::C, Ld8::H)),
            0xD => Ok(Load8(Ld8::C, Ld8::L)),
            0xE => Ok(Load8(Ld8::C, Ld8::HL)),
            0xF => Ok(Load8(Ld8::C, Ld8::A)),
            _ => Err(log_error(byte)),
        },
        0x5 => match low_nibble {
            0x0 => Ok(Load8(Ld8::D, Ld8::B)),
            0x1 => Ok(Load8(Ld8::D, Ld8::C)),
            0x2 => Ok(Load8(Ld8::D, Ld8::D)),
            0x3 => Ok(Load8(Ld8::D, Ld8::E)),
            0x4 => Ok(Load8(Ld8::D, Ld8::H)),
            0x5 => Ok(Load8(Ld8::D, Ld8::L)),
            0x6 => Ok(Load8(Ld8::D, Ld8::HL)),
            0x7 => Ok(Load8(Ld8::D, Ld8::A)),
            0x8 => Ok(Load8(Ld8::E, Ld8::B)),
            0x9 => Ok(Load8(Ld8::E, Ld8::C)),
            0xA => Ok(Load8(Ld8::E, Ld8::D)),
            0xB => Ok(Load8(Ld8::E, Ld8::E)),
            0xC => Ok(Load8(Ld8::E, Ld8::H)),
            0xD => Ok(Load8(Ld8::E, Ld8::L)),
            0xE => Ok(Load8(Ld8::E, Ld8::HL)),
            0xF => Ok(Load8(Ld8::E, Ld8::A)),
            _ => Err(log_error(byte)),
        },
        0x6 => match low_nibble {
            0x0 => Ok(Load8(Ld8::H, Ld8::B)),
            0x1 => Ok(Load8(Ld8::H, Ld8::C)),
            0x2 => Ok(Load8(Ld8::H, Ld8::D)),
            0x3 => Ok(Load8(Ld8::H, Ld8::E)),
            0x4 => Ok(Load8(Ld8::H, Ld8::H)),
            0x5 => Ok(Load8(Ld8::H, Ld8::L)),
            0x6 => Ok(Load8(Ld8::H, Ld8::HL)),
            0x7 => Ok(Load8(Ld8::H, Ld8::A)),
            0x8 => Ok(Load8(Ld8::L, Ld8::B)),
            0x9 => Ok(Load8(Ld8::L, Ld8::C)),
            0xA => Ok(Load8(Ld8::L, Ld8::D)),
            0xB => Ok(Load8(Ld8::L, Ld8::E)),
            0xC => Ok(Load8(Ld8::L, Ld8::H)),
            0xD => Ok(Load8(Ld8::L, Ld8::L)),
            0xE => Ok(Load8(Ld8::L, Ld8::HL)),
            0xF => Ok(Load8(Ld8::L, Ld8::A)),
            _ => Err(log_error(byte)),
        },
        0x7 => match low_nibble {
            0x0 => Ok(Load8(Ld8::HL, Ld8::B)),
            0x1 => Ok(Load8(Ld8::HL, Ld8::C)),
            0x2 => Ok(Load8(Ld8::HL, Ld8::D)),
            0x3 => Ok(Load8(Ld8::HL, Ld8::E)),
            0x4 => Ok(Load8(Ld8::HL, Ld8::H)),
            0x5 => Ok(Load8(Ld8::HL, Ld8::L)),
            0x6 => Ok(Control(HALT)),
            0x7 => Ok(Load8(Ld8::HL, Ld8::A)),
            0x8 => Ok(Load8(Ld8::A, Ld8::B)),
            0x9 => Ok(Load8(Ld8::A, Ld8::C)),
            0xA => Ok(Load8(Ld8::A, Ld8::D)),
            0xB => Ok(Load8(Ld8::A, Ld8::E)),
            0xC => Ok(Load8(Ld8::A, Ld8::H)),
            0xD => Ok(Load8(Ld8::A, Ld8::L)),
            0xE => Ok(Load8(Ld8::A, Ld8::HL)),
            0xF => Ok(Load8(Ld8::A, Ld8::A)),
            _ => Err(log_error(byte)),
        },
        0x8 => match low_nibble {
            0x0 => Ok(Arithmetic8(A8Ops::Add(A8Args::B))),
            0x1 => Ok(Arithmetic8(A8Ops::Add(A8Args::C))),
            0x2 => Ok(Arithmetic8(A8Ops::Add(A8Args::D))),
            0x3 => Ok(Arithmetic8(A8Ops::Add(A8Args::E))),
            0x4 => Ok(Arithmetic8(A8Ops::Add(A8Args::H))),
            0x5 => Ok(Arithmetic8(A8Ops::Add(A8Args::L))),
            0x6 => Ok(Arithmetic8(A8Ops::Add(A8Args::HL))),
            0x7 => Ok(Arithmetic8(A8Ops::Add(A8Args::A))),
            0x8 => Ok(Arithmetic8(A8Ops::AddCarry(A8Args::B))),
            0x9 => Ok(Arithmetic8(A8Ops::AddCarry(A8Args::C))),
            0xA => Ok(Arithmetic8(A8Ops::AddCarry(A8Args::D))),
            0xB => Ok(Arithmetic8(A8Ops::AddCarry(A8Args::E))),
            0xC => Ok(Arithmetic8(A8Ops::AddCarry(A8Args::H))),
            0xD => Ok(Arithmetic8(A8Ops::AddCarry(A8Args::L))),
            0xE => Ok(Arithmetic8(A8Ops::AddCarry(A8Args::HL))),
            0xF => Ok(Arithmetic8(A8Ops::AddCarry(A8Args::A))),
            _ => Err(log_error(byte)),
        },
        0x9 => match low_nibble {
            0x0 => Ok(Arithmetic8(A8Ops::Sub(A8Args::B))),
            0x1 => Ok(Arithmetic8(A8Ops::Sub(A8Args::C))),
            0x2 => Ok(Arithmetic8(A8Ops::Sub(A8Args::D))),
            0x3 => Ok(Arithmetic8(A8Ops::Sub(A8Args::E))),
            0x4 => Ok(Arithmetic8(A8Ops::Sub(A8Args::H))),
            0x5 => Ok(Arithmetic8(A8Ops::Sub(A8Args::L))),
            0x6 => Ok(Arithmetic8(A8Ops::Sub(A8Args::HL))),
            0x7 => Ok(Arithmetic8(A8Ops::Sub(A8Args::A))),
            0x8 => Ok(Arithmetic8(A8Ops::SubCarry(A8Args::B))),
            0x9 => Ok(Arithmetic8(A8Ops::SubCarry(A8Args::C))),
            0xA => Ok(Arithmetic8(A8Ops::SubCarry(A8Args::D))),
            0xB => Ok(Arithmetic8(A8Ops::SubCarry(A8Args::E))),
            0xC => Ok(Arithmetic8(A8Ops::SubCarry(A8Args::H))),
            0xD => Ok(Arithmetic8(A8Ops::SubCarry(A8Args::L))),
            0xE => Ok(Arithmetic8(A8Ops::SubCarry(A8Args::HL))),
            0xF => Ok(Arithmetic8(A8Ops::SubCarry(A8Args::A))),
            _ => Err(log_error(byte)),
        },
        0xA => match low_nibble {
            0x0 => Ok(Arithmetic8(A8Ops::And(A8Args::B))),
            0x1 => Ok(Arithmetic8(A8Ops::And(A8Args::C))),
            0x2 => Ok(Arithmetic8(A8Ops::And(A8Args::D))),
            0x3 => Ok(Arithmetic8(A8Ops::And(A8Args::E))),
            0x4 => Ok(Arithmetic8(A8Ops::And(A8Args::H))),
            0x5 => Ok(Arithmetic8(A8Ops::And(A8Args::L))),
            0x6 => Ok(Arithmetic8(A8Ops::And(A8Args::HL))),
            0x7 => Ok(Arithmetic8(A8Ops::And(A8Args::A))),
            0x8 => Ok(Arithmetic8(A8Ops::Xor(A8Args::B))),
            0x9 => Ok(Arithmetic8(A8Ops::Xor(A8Args::C))),
            0xA => Ok(Arithmetic8(A8Ops::Xor(A8Args::D))),
            0xB => Ok(Arithmetic8(A8Ops::Xor(A8Args::E))),
            0xC => Ok(Arithmetic8(A8Ops::Xor(A8Args::H))),
            0xD => Ok(Arithmetic8(A8Ops::Xor(A8Args::L))),
            0xE => Ok(Arithmetic8(A8Ops::Xor(A8Args::HL))),
            0xF => Ok(Arithmetic8(A8Ops::Xor(A8Args::A))),
            _ => Err(log_error(byte)),
        },
        0xB => match low_nibble {
            0x0 => Ok(Arithmetic8(A8Ops::Or(A8Args::B))),
            0x1 => Ok(Arithmetic8(A8Ops::Or(A8Args::C))),
            0x2 => Ok(Arithmetic8(A8Ops::Or(A8Args::D))),
            0x3 => Ok(Arithmetic8(A8Ops::Or(A8Args::E))),
            0x4 => Ok(Arithmetic8(A8Ops::Or(A8Args::H))),
            0x5 => Ok(Arithmetic8(A8Ops::Or(A8Args::L))),
            0x6 => Ok(Arithmetic8(A8Ops::Or(A8Args::HL))),
            0x7 => Ok(Arithmetic8(A8Ops::Or(A8Args::A))),
            0x8 => Ok(Arithmetic8(A8Ops::Cmp(A8Args::B))),
            0x9 => Ok(Arithmetic8(A8Ops::Cmp(A8Args::C))),
            0xA => Ok(Arithmetic8(A8Ops::Cmp(A8Args::D))),
            0xB => Ok(Arithmetic8(A8Ops::Cmp(A8Args::E))),
            0xC => Ok(Arithmetic8(A8Ops::Cmp(A8Args::H))),
            0xD => Ok(Arithmetic8(A8Ops::Cmp(A8Args::L))),
            0xE => Ok(Arithmetic8(A8Ops::Cmp(A8Args::HL))),
            0xF => Ok(Arithmetic8(A8Ops::Cmp(A8Args::A))),
            _ => Err(log_error(byte)),
        },
        0xC => match low_nibble {
            0x0 => Ok(Return(Ret::NZ)),
            0x1 => Ok(Pop(PushPop::BC)),
            0x2 => Ok(Jump(JP::NZ)),
            0x3 => Ok(Jump(JP::U16)),
            0x4 => Ok(Call(Calls::NZ)),
            0x5 => Ok(Push(PushPop::BC)),
            0x6 => Ok(Arithmetic8(A8Ops::Add(A8Args::U8))),
            0x7 => Ok(Restart(0)),
            0x8 => Ok(Return(Ret::Z)),
            0x9 => Ok(Return(Ret::None)),
            0xA => Ok(Jump(JP::Z)),
            0xB => Ok(CB),
            0xC => Ok(Call(Calls::Z)),
            0xD => Ok(Call(Calls::U16)),
            0xE => Ok(Arithmetic8(A8Ops::AddCarry(A8Args::U8))),
            0xF => Ok(Restart(1)),
            _ => Err(log_error(byte)),
        },
        0xD => match low_nibble {
            0x0 => Ok(Return(Ret::NC)),
            0x1 => Ok(Pop(PushPop::DE)),
            0x2 => Ok(Jump(JP::NC)),
            0x3 => Err(log_error(byte)),
            0x4 => Ok(Call(Calls::NC)),
            0x5 => Ok(Push(PushPop::DE)),
            0x6 => Ok(Arithmetic8(A8Ops::Sub(A8Args::U8))),
            0x7 => Ok(Restart(2)),
            0x8 => Ok(Return(Ret::C)),
            0x9 => Ok(Return(Ret::I)),
            0xA => Ok(Jump(JP::C)),
            0xB => Err(log_error(byte)),
            0xC => Ok(Call(Calls::C)),
            0xD => Err(log_error(byte)),
            0xE => Ok(Arithmetic8(A8Ops::SubCarry(A8Args::U8))),
            0xF => Ok(Restart(3)),
            _ => Err(log_error(byte)),
        },
        0xE => match low_nibble {
            0x0 => Ok(Load8(Ld8::FF00AddU8, Ld8::A)),
            0x1 => Ok(Pop(PushPop::HL)),
            0x2 => Ok(Load8(Ld8::FF00AddC, Ld8::A)),
            0x3 => Err(log_error(byte)),
            0x4 => Err(log_error(byte)),
            0x5 => Ok(Push(PushPop::HL)),
            0x6 => Ok(Arithmetic8(A8Ops::And(A8Args::U8))),
            0x7 => Ok(Restart(4)),
            0x8 => Ok(Arithmetic16(A16Ops::AddI8)),
            0x9 => Ok(Jump(JP::HL)),
            0xA => Ok(Load8(Ld8::U16, Ld8::A)),
            0xB => Err(log_error(byte)),
            0xC => Err(log_error(byte)),
            0xD => Err(log_error(byte)),
            0xE => Ok(Arithmetic8(A8Ops::Xor(A8Args::U8))),
            0xF => Ok(Restart(5)),
            _ => Err(log_error(byte)),
        },
        0xF => match low_nibble {
            0x0 => Ok(Load8(Ld8::A, Ld8::FF00AddU8)),
            0x1 => Ok(Pop(PushPop::AF)),
            0x2 => Ok(Load8(Ld8::A, Ld8::FF00AddC)),
            0x3 => Ok(Control(DI)),
            0x4 => Err(log_error(byte)),
            0x5 => Ok(Push(PushPop::AF)),
            0x6 => Ok(Arithmetic8(A8Ops::Or(A8Args::U8))),
            0x7 => Ok(Restart(6)),
            0x8 => Ok(Arithmetic16(A16Ops::LdI8)),
            0x9 => Ok(Load16(SPHL)),
            0xA => Ok(Load8(Ld8::A, Ld8::U16)),
            0xB => Ok(Control(EI)),
            0xC => Err(log_error(byte)),
            0xD => Err(log_error(byte)),
            0xE => Ok(Arithmetic8(A8Ops::Cmp(A8Args::U8))),
            0xF => Ok(Restart(7)),
            _ => Err(log_error(byte)),
        },
        _ => Err(log_error(byte)),
    }
}

pub fn decode_cb(byte: u8) -> Result<Instruction, String> {
    let high_nibble = byte & 0xF0;
    let low_nibble = byte & 0x0F;

    match high_nibble {
        0x0 => match low_nibble {
            0x0 => Ok(BitOp(RLC(BitArgs::B))),
            0x1 => Ok(BitOp(RLC(BitArgs::C))),
            0x2 => Ok(BitOp(RLC(BitArgs::D))),
            0x3 => Ok(BitOp(RLC(BitArgs::E))),
            0x4 => Ok(BitOp(RLC(BitArgs::H))),
            0x5 => Ok(BitOp(RLC(BitArgs::L))),
            0x6 => Ok(BitOp(RLC(BitArgs::HL))),
            0x7 => Ok(BitOp(RLC(BitArgs::A))),
            0x8 => Ok(BitOp(RRC(BitArgs::B))),
            0x9 => Ok(BitOp(RRC(BitArgs::C))),
            0xA => Ok(BitOp(RRC(BitArgs::D))),
            0xB => Ok(BitOp(RRC(BitArgs::E))),
            0xC => Ok(BitOp(RRC(BitArgs::H))),
            0xD => Ok(BitOp(RRC(BitArgs::L))),
            0xE => Ok(BitOp(RRC(BitArgs::HL))),
            0xF => Ok(BitOp(RRC(BitArgs::A))),
            _ => Err(log_error(byte)),
        },
        0x1 => match low_nibble {
            0x0 => Ok(BitOp(RL(BitArgs::B))),
            0x1 => Ok(BitOp(RL(BitArgs::C))),
            0x2 => Ok(BitOp(RL(BitArgs::D))),
            0x3 => Ok(BitOp(RL(BitArgs::E))),
            0x4 => Ok(BitOp(RL(BitArgs::H))),
            0x5 => Ok(BitOp(RL(BitArgs::L))),
            0x6 => Ok(BitOp(RL(BitArgs::HL))),
            0x7 => Ok(BitOp(RL(BitArgs::A))),
            0x8 => Ok(BitOp(RR(BitArgs::B))),
            0x9 => Ok(BitOp(RR(BitArgs::C))),
            0xA => Ok(BitOp(RR(BitArgs::D))),
            0xB => Ok(BitOp(RR(BitArgs::E))),
            0xC => Ok(BitOp(RR(BitArgs::H))),
            0xD => Ok(BitOp(RR(BitArgs::L))),
            0xE => Ok(BitOp(RR(BitArgs::HL))),
            0xF => Ok(BitOp(RR(BitArgs::A))),
            _ => Err(log_error(byte)),
        },
        0x2 => match low_nibble {
            0x0 => Ok(BitOp(SLA(BitArgs::B))),
            0x1 => Ok(BitOp(SLA(BitArgs::C))),
            0x2 => Ok(BitOp(SLA(BitArgs::D))),
            0x3 => Ok(BitOp(SLA(BitArgs::E))),
            0x4 => Ok(BitOp(SLA(BitArgs::H))),
            0x5 => Ok(BitOp(SLA(BitArgs::L))),
            0x6 => Ok(BitOp(SLA(BitArgs::HL))),
            0x7 => Ok(BitOp(SLA(BitArgs::A))),
            0x8 => Ok(BitOp(SRA(BitArgs::B))),
            0x9 => Ok(BitOp(SRA(BitArgs::C))),
            0xA => Ok(BitOp(SRA(BitArgs::D))),
            0xB => Ok(BitOp(SRA(BitArgs::E))),
            0xC => Ok(BitOp(SRA(BitArgs::H))),
            0xD => Ok(BitOp(SRA(BitArgs::L))),
            0xE => Ok(BitOp(SRA(BitArgs::HL))),
            0xF => Ok(BitOp(SRA(BitArgs::A))),
            _ => Err(log_error(byte)),
        },
        0x3 => match low_nibble {
            0x0 => Ok(BitOp(Swap(BitArgs::B))),
            0x1 => Ok(BitOp(Swap(BitArgs::C))),
            0x2 => Ok(BitOp(Swap(BitArgs::D))),
            0x3 => Ok(BitOp(Swap(BitArgs::E))),
            0x4 => Ok(BitOp(Swap(BitArgs::H))),
            0x5 => Ok(BitOp(Swap(BitArgs::L))),
            0x6 => Ok(BitOp(Swap(BitArgs::HL))),
            0x7 => Ok(BitOp(Swap(BitArgs::A))),
            0x8 => Ok(BitOp(SRL(BitArgs::B))),
            0x9 => Ok(BitOp(SRL(BitArgs::C))),
            0xA => Ok(BitOp(SRL(BitArgs::D))),
            0xB => Ok(BitOp(SRL(BitArgs::E))),
            0xC => Ok(BitOp(SRL(BitArgs::H))),
            0xD => Ok(BitOp(SRL(BitArgs::L))),
            0xE => Ok(BitOp(SRL(BitArgs::HL))),
            0xF => Ok(BitOp(SRL(BitArgs::A))),
            _ => Err(log_error(byte)),
        },
        0x4 => match low_nibble {
            0x0 => Ok(BitOp(Bit(0, BitArgs::B))),
            0x1 => Ok(BitOp(Bit(0, BitArgs::C))),
            0x2 => Ok(BitOp(Bit(0, BitArgs::D))),
            0x3 => Ok(BitOp(Bit(0, BitArgs::E))),
            0x4 => Ok(BitOp(Bit(0, BitArgs::H))),
            0x5 => Ok(BitOp(Bit(0, BitArgs::L))),
            0x6 => Ok(BitOp(Bit(0, BitArgs::HL))),
            0x7 => Ok(BitOp(Bit(0, BitArgs::A))),
            0x8 => Ok(BitOp(Bit(1, BitArgs::B))),
            0x9 => Ok(BitOp(Bit(1, BitArgs::C))),
            0xA => Ok(BitOp(Bit(1, BitArgs::D))),
            0xB => Ok(BitOp(Bit(1, BitArgs::E))),
            0xC => Ok(BitOp(Bit(1, BitArgs::H))),
            0xD => Ok(BitOp(Bit(1, BitArgs::L))),
            0xE => Ok(BitOp(Bit(1, BitArgs::HL))),
            0xF => Ok(BitOp(Bit(1, BitArgs::A))),
            _ => Err(log_error(byte)),
        },
        0x5 => match low_nibble {
            0x0 => Ok(BitOp(Bit(2, BitArgs::B))),
            0x1 => Ok(BitOp(Bit(2, BitArgs::C))),
            0x2 => Ok(BitOp(Bit(2, BitArgs::D))),
            0x3 => Ok(BitOp(Bit(2, BitArgs::E))),
            0x4 => Ok(BitOp(Bit(2, BitArgs::H))),
            0x5 => Ok(BitOp(Bit(2, BitArgs::L))),
            0x6 => Ok(BitOp(Bit(2, BitArgs::HL))),
            0x7 => Ok(BitOp(Bit(2, BitArgs::A))),
            0x8 => Ok(BitOp(Bit(3, BitArgs::B))),
            0x9 => Ok(BitOp(Bit(3, BitArgs::C))),
            0xA => Ok(BitOp(Bit(3, BitArgs::D))),
            0xB => Ok(BitOp(Bit(3, BitArgs::E))),
            0xC => Ok(BitOp(Bit(3, BitArgs::H))),
            0xD => Ok(BitOp(Bit(3, BitArgs::L))),
            0xE => Ok(BitOp(Bit(3, BitArgs::HL))),
            0xF => Ok(BitOp(Bit(3, BitArgs::A))),
            _ => Err(log_error(byte)),
        },
        0x6 => match low_nibble {
            0x0 => Ok(BitOp(Bit(4, BitArgs::B))),
            0x1 => Ok(BitOp(Bit(4, BitArgs::C))),
            0x2 => Ok(BitOp(Bit(4, BitArgs::D))),
            0x3 => Ok(BitOp(Bit(4, BitArgs::E))),
            0x4 => Ok(BitOp(Bit(4, BitArgs::H))),
            0x5 => Ok(BitOp(Bit(4, BitArgs::L))),
            0x6 => Ok(BitOp(Bit(4, BitArgs::HL))),
            0x7 => Ok(BitOp(Bit(4, BitArgs::A))),
            0x8 => Ok(BitOp(Bit(5, BitArgs::B))),
            0x9 => Ok(BitOp(Bit(5, BitArgs::C))),
            0xA => Ok(BitOp(Bit(5, BitArgs::D))),
            0xB => Ok(BitOp(Bit(5, BitArgs::E))),
            0xC => Ok(BitOp(Bit(5, BitArgs::H))),
            0xD => Ok(BitOp(Bit(5, BitArgs::L))),
            0xE => Ok(BitOp(Bit(5, BitArgs::HL))),
            0xF => Ok(BitOp(Bit(5, BitArgs::A))),
            _ => Err(log_error(byte)),
        },
        0x7 => match low_nibble {
            0x0 => Ok(BitOp(Bit(6, BitArgs::B))),
            0x1 => Ok(BitOp(Bit(6, BitArgs::C))),
            0x2 => Ok(BitOp(Bit(6, BitArgs::D))),
            0x3 => Ok(BitOp(Bit(6, BitArgs::E))),
            0x4 => Ok(BitOp(Bit(6, BitArgs::H))),
            0x5 => Ok(BitOp(Bit(6, BitArgs::L))),
            0x6 => Ok(BitOp(Bit(6, BitArgs::HL))),
            0x7 => Ok(BitOp(Bit(6, BitArgs::A))),
            0x8 => Ok(BitOp(Bit(7, BitArgs::B))),
            0x9 => Ok(BitOp(Bit(7, BitArgs::C))),
            0xA => Ok(BitOp(Bit(7, BitArgs::D))),
            0xB => Ok(BitOp(Bit(7, BitArgs::E))),
            0xC => Ok(BitOp(Bit(7, BitArgs::H))),
            0xD => Ok(BitOp(Bit(7, BitArgs::L))),
            0xE => Ok(BitOp(Bit(7, BitArgs::HL))),
            0xF => Ok(BitOp(Bit(7, BitArgs::A))),
            _ => Err(log_error(byte)),
        },
        0x8 => match low_nibble {
            0x0 => Ok(BitOp(Reset(0, BitArgs::B))),
            0x1 => Ok(BitOp(Reset(0, BitArgs::C))),
            0x2 => Ok(BitOp(Reset(0, BitArgs::D))),
            0x3 => Ok(BitOp(Reset(0, BitArgs::E))),
            0x4 => Ok(BitOp(Reset(0, BitArgs::H))),
            0x5 => Ok(BitOp(Reset(0, BitArgs::L))),
            0x6 => Ok(BitOp(Reset(0, BitArgs::HL))),
            0x7 => Ok(BitOp(Reset(0, BitArgs::A))),
            0x8 => Ok(BitOp(Reset(1, BitArgs::B))),
            0x9 => Ok(BitOp(Reset(1, BitArgs::C))),
            0xA => Ok(BitOp(Reset(1, BitArgs::D))),
            0xB => Ok(BitOp(Reset(1, BitArgs::E))),
            0xC => Ok(BitOp(Reset(1, BitArgs::H))),
            0xD => Ok(BitOp(Reset(1, BitArgs::L))),
            0xE => Ok(BitOp(Reset(1, BitArgs::HL))),
            0xF => Ok(BitOp(Reset(1, BitArgs::A))),
            _ => Err(log_error(byte)),
        },
        0x9 => match low_nibble {
            0x0 => Ok(BitOp(Reset(2, BitArgs::B))),
            0x1 => Ok(BitOp(Reset(2, BitArgs::C))),
            0x2 => Ok(BitOp(Reset(2, BitArgs::D))),
            0x3 => Ok(BitOp(Reset(2, BitArgs::E))),
            0x4 => Ok(BitOp(Reset(2, BitArgs::H))),
            0x5 => Ok(BitOp(Reset(2, BitArgs::L))),
            0x6 => Ok(BitOp(Reset(2, BitArgs::HL))),
            0x7 => Ok(BitOp(Reset(2, BitArgs::A))),
            0x8 => Ok(BitOp(Reset(3, BitArgs::B))),
            0x9 => Ok(BitOp(Reset(3, BitArgs::C))),
            0xA => Ok(BitOp(Reset(3, BitArgs::D))),
            0xB => Ok(BitOp(Reset(3, BitArgs::E))),
            0xC => Ok(BitOp(Reset(3, BitArgs::H))),
            0xD => Ok(BitOp(Reset(3, BitArgs::L))),
            0xE => Ok(BitOp(Reset(3, BitArgs::HL))),
            0xF => Ok(BitOp(Reset(3, BitArgs::A))),
            _ => Err(log_error(byte)),
        },
        0xA => match low_nibble {
            0x0 => Ok(BitOp(Reset(4, BitArgs::B))),
            0x1 => Ok(BitOp(Reset(4, BitArgs::C))),
            0x2 => Ok(BitOp(Reset(4, BitArgs::D))),
            0x3 => Ok(BitOp(Reset(4, BitArgs::E))),
            0x4 => Ok(BitOp(Reset(4, BitArgs::H))),
            0x5 => Ok(BitOp(Reset(4, BitArgs::L))),
            0x6 => Ok(BitOp(Reset(4, BitArgs::HL))),
            0x7 => Ok(BitOp(Reset(4, BitArgs::A))),
            0x8 => Ok(BitOp(Reset(5, BitArgs::B))),
            0x9 => Ok(BitOp(Reset(5, BitArgs::C))),
            0xA => Ok(BitOp(Reset(5, BitArgs::D))),
            0xB => Ok(BitOp(Reset(5, BitArgs::E))),
            0xC => Ok(BitOp(Reset(5, BitArgs::H))),
            0xD => Ok(BitOp(Reset(5, BitArgs::L))),
            0xE => Ok(BitOp(Reset(5, BitArgs::HL))),
            0xF => Ok(BitOp(Reset(5, BitArgs::A))),
            _ => Err(log_error(byte)),
        },
        0xB => match low_nibble {
            0x0 => Ok(BitOp(Reset(6, BitArgs::B))),
            0x1 => Ok(BitOp(Reset(6, BitArgs::C))),
            0x2 => Ok(BitOp(Reset(6, BitArgs::D))),
            0x3 => Ok(BitOp(Reset(6, BitArgs::E))),
            0x4 => Ok(BitOp(Reset(6, BitArgs::H))),
            0x5 => Ok(BitOp(Reset(6, BitArgs::L))),
            0x6 => Ok(BitOp(Reset(6, BitArgs::HL))),
            0x7 => Ok(BitOp(Reset(6, BitArgs::A))),
            0x8 => Ok(BitOp(Reset(7, BitArgs::B))),
            0x9 => Ok(BitOp(Reset(7, BitArgs::C))),
            0xA => Ok(BitOp(Reset(7, BitArgs::D))),
            0xB => Ok(BitOp(Reset(7, BitArgs::E))),
            0xC => Ok(BitOp(Reset(7, BitArgs::H))),
            0xD => Ok(BitOp(Reset(7, BitArgs::L))),
            0xE => Ok(BitOp(Reset(7, BitArgs::HL))),
            0xF => Ok(BitOp(Reset(7, BitArgs::A))),
            _ => Err(log_error(byte)),
        },
        0xC => match low_nibble {
            0x0 => Ok(BitOp(Set(0, BitArgs::B))),
            0x1 => Ok(BitOp(Set(0, BitArgs::C))),
            0x2 => Ok(BitOp(Set(0, BitArgs::D))),
            0x3 => Ok(BitOp(Set(0, BitArgs::E))),
            0x4 => Ok(BitOp(Set(0, BitArgs::H))),
            0x5 => Ok(BitOp(Set(0, BitArgs::L))),
            0x6 => Ok(BitOp(Set(0, BitArgs::HL))),
            0x7 => Ok(BitOp(Set(0, BitArgs::A))),
            0x8 => Ok(BitOp(Set(1, BitArgs::B))),
            0x9 => Ok(BitOp(Set(1, BitArgs::C))),
            0xA => Ok(BitOp(Set(1, BitArgs::D))),
            0xB => Ok(BitOp(Set(1, BitArgs::E))),
            0xC => Ok(BitOp(Set(1, BitArgs::H))),
            0xD => Ok(BitOp(Set(1, BitArgs::L))),
            0xE => Ok(BitOp(Set(1, BitArgs::HL))),
            0xF => Ok(BitOp(Set(1, BitArgs::A))),
            _ => Err(log_error(byte)),
        },
        0xD => match low_nibble {
            0x0 => Ok(BitOp(Set(2, BitArgs::B))),
            0x1 => Ok(BitOp(Set(2, BitArgs::C))),
            0x2 => Ok(BitOp(Set(2, BitArgs::D))),
            0x3 => Ok(BitOp(Set(2, BitArgs::E))),
            0x4 => Ok(BitOp(Set(2, BitArgs::H))),
            0x5 => Ok(BitOp(Set(2, BitArgs::L))),
            0x6 => Ok(BitOp(Set(2, BitArgs::HL))),
            0x7 => Ok(BitOp(Set(2, BitArgs::A))),
            0x8 => Ok(BitOp(Set(3, BitArgs::B))),
            0x9 => Ok(BitOp(Set(3, BitArgs::C))),
            0xA => Ok(BitOp(Set(3, BitArgs::D))),
            0xB => Ok(BitOp(Set(3, BitArgs::E))),
            0xC => Ok(BitOp(Set(3, BitArgs::H))),
            0xD => Ok(BitOp(Set(3, BitArgs::L))),
            0xE => Ok(BitOp(Set(3, BitArgs::HL))),
            0xF => Ok(BitOp(Set(3, BitArgs::A))),
            _ => Err(log_error(byte)),
        },
        0xE => match low_nibble {
            0x0 => Ok(BitOp(Set(4, BitArgs::B))),
            0x1 => Ok(BitOp(Set(4, BitArgs::C))),
            0x2 => Ok(BitOp(Set(4, BitArgs::D))),
            0x3 => Ok(BitOp(Set(4, BitArgs::E))),
            0x4 => Ok(BitOp(Set(4, BitArgs::H))),
            0x5 => Ok(BitOp(Set(4, BitArgs::L))),
            0x6 => Ok(BitOp(Set(4, BitArgs::HL))),
            0x7 => Ok(BitOp(Set(4, BitArgs::A))),
            0x8 => Ok(BitOp(Set(5, BitArgs::B))),
            0x9 => Ok(BitOp(Set(5, BitArgs::C))),
            0xA => Ok(BitOp(Set(5, BitArgs::D))),
            0xB => Ok(BitOp(Set(5, BitArgs::E))),
            0xC => Ok(BitOp(Set(5, BitArgs::H))),
            0xD => Ok(BitOp(Set(5, BitArgs::L))),
            0xE => Ok(BitOp(Set(5, BitArgs::HL))),
            0xF => Ok(BitOp(Set(5, BitArgs::A))),
            _ => Err(log_error(byte)),
        },
        0xF => match low_nibble {
            0x0 => Ok(BitOp(Set(6, BitArgs::B))),
            0x1 => Ok(BitOp(Set(6, BitArgs::C))),
            0x2 => Ok(BitOp(Set(6, BitArgs::D))),
            0x3 => Ok(BitOp(Set(6, BitArgs::E))),
            0x4 => Ok(BitOp(Set(6, BitArgs::H))),
            0x5 => Ok(BitOp(Set(6, BitArgs::L))),
            0x6 => Ok(BitOp(Set(6, BitArgs::HL))),
            0x7 => Ok(BitOp(Set(6, BitArgs::A))),
            0x8 => Ok(BitOp(Set(7, BitArgs::B))),
            0x9 => Ok(BitOp(Set(7, BitArgs::C))),
            0xA => Ok(BitOp(Set(7, BitArgs::D))),
            0xB => Ok(BitOp(Set(7, BitArgs::E))),
            0xC => Ok(BitOp(Set(7, BitArgs::H))),
            0xD => Ok(BitOp(Set(7, BitArgs::L))),
            0xE => Ok(BitOp(Set(7, BitArgs::HL))),
            0xF => Ok(BitOp(Set(7, BitArgs::A))),
            _ => Err(log_error(byte)),
        },
        _ => Err(log_error(byte)),
    }
}

fn log_error(byte: u8) -> String {
    format!("Instruction 0x{:X} not found", byte)
}
